import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/event_model.dart';

class PaymentService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // Thanh to√°n gi·∫£ l·∫≠p cho s·ª± ki·ªán c√≥ ph√≠
  Future<Map<String, dynamic>> processMockPayment({
    required String eventId,
    required String userId,
    required String userEmail,
    required String userName,
    required double amount,
    required String paymentMethod,
  }) async {
    try {
      // T·∫°o payment ID gi·∫£ l·∫≠p
      String paymentId = 'PAY_${DateTime.now().millisecondsSinceEpoch}';

      // Gi·∫£ l·∫≠p th·ªùi gian x·ª≠ l√Ω thanh to√°n (1-3 gi√¢y)
      await Future.delayed(Duration(seconds: 2));

      // Gi·∫£ l·∫≠p k·∫øt qu·∫£ thanh to√°n (lu√¥n th√†nh c√¥ng trong m√¥i tr∆∞·ªùng test)
      return {
        'success': true,
        'paymentId': paymentId,
        'amount': amount,
        'paymentMethod': paymentMethod,
        'paidAt': DateTime.now(),
        'transactionId': 'TXN_${DateTime.now().millisecondsSinceEpoch}',
      };
    } catch (e) {
      throw Exception('L·ªói x·ª≠ l√Ω thanh to√°n: ${e.toString()}');
    }
  }

  // C·∫≠p nh·∫≠t registration v·ªõi th√¥ng tin thanh to√°n
  Future<void> updateRegistrationWithPayment({
    required String registrationId,
    required String paymentId,
    required double amount,
    required String paymentMethod,
    required DateTime paidAt,
  }) async {
    try {
      await _firestore.collection('registrations').doc(registrationId).update({
        'isPaid': true,
        'paidAt': Timestamp.fromDate(paidAt),
        'paymentId': paymentId,
        'paymentMethod': paymentMethod,
        'amountPaid': amount,
        'updatedAt': Timestamp.fromDate(DateTime.now()),
      });
    } catch (e) {
      throw Exception('L·ªói c·∫≠p nh·∫≠t th√¥ng tin thanh to√°n: ${e.toString()}');
    }
  }

  // Ki·ªÉm tra xem s·ª± ki·ªán c√≥ c·∫ßn thanh to√°n kh√¥ng
  bool requiresPayment(EventModel event) {
    return !event.isFree && event.price != null && event.price! > 0;
  }

  // L·∫•y danh s√°ch ph∆∞∆°ng th·ª©c thanh to√°n h·ªó tr·ª£ (ch·ªâ ng√¢n h√†ng)
  List<Map<String, dynamic>> getSupportedPaymentMethods() {
    return [
      {
        'id': 'bank_transfer',
        'name': 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
        'icon': 'üè¶',
        'description': 'Thanh to√°n qua chuy·ªÉn kho·∫£n ng√¢n h√†ng',
      },
    ];
  }

  // Ho√†n ti·ªÅn gi·∫£ l·∫≠p
  Future<Map<String, dynamic>> processMockRefund({
    required String paymentId,
    required double amount,
    String method = 'bank_transfer',
  }) async {
    try {
      await Future.delayed(Duration(seconds: 1));
      return {
        'success': true,
        'refundId': 'REF_${DateTime.now().millisecondsSinceEpoch}',
        'refundedAt': DateTime.now(),
        'refundMethod': method,
        'refundAmount': amount,
      };
    } catch (e) {
      throw Exception('L·ªói ho√†n ti·ªÅn: ${e.toString()}');
    }
  }
}
