import 'package:flutter/material.dart';
import '../models/user_model.dart';
import '../providers/admin_provider.dart';
import '../constants/app_colors.dart';
import '../constants/app_design.dart';

class UserCardWidget extends StatelessWidget {
  final UserModel user;
  final AdminProvider adminProvider;
  final BoxConstraints constraints;
  final bool isSelected;
  final VoidCallback? onTap;
  final VoidCallback? onSelectionChanged;

  const UserCardWidget({
    super.key,
    required this.user,
    required this.adminProvider,
    required this.constraints,
    this.isSelected = false,
    this.onTap,
    this.onSelectionChanged,
  });

  @override
  Widget build(BuildContext context) {
    final isWideScreen = constraints.maxWidth > 600;

    return Container(
      margin: const EdgeInsets.only(bottom: AppDesign.spacing12),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(AppDesign.radius16),
        border: Border.all(
          color: isSelected ? AppColors.adminPrimary : AppColors.cardBorder,
          width: isSelected ? 2 : 1,
        ),
        boxShadow: [
          BoxShadow(
            color: isSelected
                ? AppColors.adminPrimary.withOpacity(0.15)
                : Colors.black.withOpacity(0.05),
            blurRadius: isSelected ? 12 : 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(AppDesign.radius16),
        child: Padding(
          padding: const EdgeInsets.all(AppDesign.spacing16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Header with enhanced design
              Row(
                children: [
                  if (onSelectionChanged != null)
                    Container(
                      width: 24,
                      height: 24,
                      margin: const EdgeInsets.only(right: AppDesign.spacing12),
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        border: Border.all(
                          color: isSelected
                              ? AppColors.adminPrimary
                              : AppColors.cardBorder,
                          width: 2,
                        ),
                        color: isSelected
                            ? AppColors.adminPrimary
                            : Colors.white,
                      ),
                      child: isSelected
                          ? const Icon(
                              Icons.check,
                              size: 16,
                              color: Colors.white,
                            )
                          : null,
                    ),

                  // User avatar
                  Container(
                    width: 48,
                    height: 48,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          _getRoleColor(user.role).withOpacity(0.2),
                          _getRoleColor(user.role).withOpacity(0.1),
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(AppDesign.radius12),
                      border: Border.all(
                        color: _getRoleColor(user.role).withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: user.profileImageUrl != null
                        ? ClipRRect(
                            borderRadius: BorderRadius.circular(AppDesign.radius12),
                            child: Image.network(
                              user.profileImageUrl!,
                              fit: BoxFit.cover,
                              errorBuilder: (context, error, stackTrace) =>
                                  Icon(
                                    Icons.person,
                                    color: _getRoleColor(user.role),
                                    size: 24,
                                  ),
                            ),
                          )
                        : Icon(
                            Icons.person,
                            color: _getRoleColor(user.role),
                            size: 24,
                          ),
                  ),

                  const SizedBox(width: AppDesign.spacing12),

                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          user.fullName,
                          style: AppDesign.bodyLarge.copyWith(
                            fontWeight: FontWeight.w700,
                            color: const Color(0xFF111827),
                            fontSize: 16,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: AppDesign.spacing4),
                        Text(
                          user.email,
                          style: AppDesign.bodySmall.copyWith(
                            color: const Color(0xFF6B7280),
                            fontWeight: FontWeight.w500,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                    ),
                  ),

                  const SizedBox(width: AppDesign.spacing12),

                  // Status badges
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      _buildStatusChip(
                        _getApprovalStatusText(user.approvalStatus),
                        _getApprovalStatusColor(user.approvalStatus),
                      ),
                      if (user.isBlocked)
                        Padding(
                          padding: const EdgeInsets.only(top: AppDesign.spacing4),
                          child: _buildStatusChip(
                            'Blocked',
                            Colors.red,
                          ),
                        ),
                    ],
                  ),
                ],
              ),

              const SizedBox(height: AppDesign.spacing12),

              // User details
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Role icon
                  Container(
                    width: 48,
                    height: 48,
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          _getRoleColor(user.role).withOpacity(0.2),
                          _getRoleColor(user.role).withOpacity(0.1),
                        ],
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                      ),
                      borderRadius: BorderRadius.circular(AppDesign.radius12),
                      border: Border.all(
                        color: _getRoleColor(user.role).withOpacity(0.3),
                        width: 1,
                      ),
                    ),
                    child: Icon(
                      _getRoleIcon(user.role),
                      color: _getRoleColor(user.role),
                      size: 24,
                    ),
                  ),

                  const SizedBox(width: AppDesign.spacing16),

                  // User information
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // Role and department
                        Row(
                          children: [
                            Icon(
                              _getRoleIcon(user.role),
                              size: 14,
                              color: const Color(0xFF6B7280),
                            ),
                            const SizedBox(width: AppDesign.spacing4),
                            Expanded(
                              child: Text(
                                '${_getRoleDisplayText(user.role)}${user.department != null ? ' - ${user.department}' : ''}',
                                style: AppDesign.bodySmall.copyWith(
                                  color: const Color(0xFF6B7280),
                                  fontWeight: FontWeight.w500,
                                ),
                                maxLines: 1,
                                overflow: TextOverflow.ellipsis,
                              ),
                            ),
                          ],
                        ),

                        const SizedBox(height: AppDesign.spacing8),

                        // Student ID and phone
                        if (user.studentId != null || user.phoneNumber != null)
                          Container(
                            padding: const EdgeInsets.all(AppDesign.spacing8),
                            decoration: BoxDecoration(
                              color: AppColors.surfaceVariant.withOpacity(0.5),
                              borderRadius: BorderRadius.circular(AppDesign.radius8),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                if (user.studentId != null)
                                  Row(
                                    children: [
                                      Icon(
                                        Icons.badge,
                                        size: 12,
                                        color: const Color(0xFF374151),
                                      ),
                                      const SizedBox(width: AppDesign.spacing4),
                                      Text(
                                        'ID: ${user.studentId}',
                                        style: AppDesign.bodySmall.copyWith(
                                          color: const Color(0xFF374151),
                                          height: 1.4,
                                        ),
                                      ),
                                    ],
                                  ),
                                if (user.phoneNumber != null)
                                  Padding(
                                    padding: const EdgeInsets.only(top: AppDesign.spacing4),
                                    child: Row(
                                      children: [
                                        Icon(
                                          Icons.phone,
                                          size: 12,
                                          color: const Color(0xFF374151),
                                        ),
                                        const SizedBox(width: AppDesign.spacing4),
                                        Text(
                                          user.phoneNumber!,
                                          style: AppDesign.bodySmall.copyWith(
                                            color: const Color(0xFF374151),
                                            height: 1.4,
                                          ),
                                        ),
                                      ],
                                    ],
                                  ),
                              ],
                            ),
                          ),

                        const SizedBox(height: AppDesign.spacing12),

                        // Action buttons
                        Row(
                          children: [
                            if (user.isPending) ...[
                              Expanded(
                                child: _buildActionButton(
                                  'Approve',
                                  Icons.check,
                                  Colors.green,
                                  () => _approveUser(context),
                                ),
                              ),
                              const SizedBox(width: AppDesign.spacing8),
                              Expanded(
                                child: _buildActionButton(
                                  'Reject',
                                  Icons.close,
                                  Colors.red,
                                  () => _rejectUser(context),
                                ),
                              ),
                            ] else ...[
                              Expanded(
                                child: _buildActionButton(
                                  user.isBlocked ? 'Unblock' : 'Block',
                                  user.isBlocked ? Icons.lock_open : Icons.block,
                                  user.isBlocked ? Colors.orange : Colors.red,
                                  () => user.isBlocked
                                      ? _unblockUser(context)
                                      : _blockUser(context),
                                ),
                              ),
                            ],
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatusChip(String label, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: AppDesign.spacing8,
        vertical: AppDesign.spacing4,
      ),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(AppDesign.radius8),
        border: Border.all(
          color: color.withOpacity(0.3),
          width: 1,
        ),
      ),
      child: Text(
        label,
        style: AppDesign.bodySmall.copyWith(
          color: color,
          fontWeight: FontWeight.w600,
          fontSize: 10,
        ),
      ),
    );
  }

  Widget _buildActionButton(
    String label,
    IconData icon,
    Color color,
    VoidCallback onPressed,
  ) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon, size: 16),
      label: Text(
        label,
        style: AppDesign.bodySmall.copyWith(
          fontWeight: FontWeight.w600,
        ),
      ),
      style: ElevatedButton.styleFrom(
        backgroundColor: color,
        foregroundColor: Colors.white,
        padding: const EdgeInsets.symmetric(
          horizontal: AppDesign.spacing12,
          vertical: AppDesign.spacing8,
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(AppDesign.radius8),
        ),
        elevation: 0,
        minimumSize: const Size(0, 32),
      ),
    );
  }

  Color _getRoleColor(String role) {
    switch (role) {
      case 'admin':
        return Colors.purple;
      case 'organizer':
        return Colors.blue;
      case 'student':
        return Colors.green;
      default:
        return Colors.grey;
    }
  }

  IconData _getRoleIcon(String role) {
    switch (role) {
      case 'admin':
        return Icons.admin_panel_settings;
      case 'organizer':
        return Icons.event;
      case 'student':
        return Icons.school;
      default:
        return Icons.person;
    }
  }

  String _getRoleDisplayText(String role) {
    switch (role) {
      case 'admin':
        return 'Administrator';
      case 'organizer':
        return 'Event Organizer';
      case 'student':
        return 'Student';
      default:
        return role;
    }
  }

  Color _getApprovalStatusColor(String status) {
    switch (status) {
      case 'approved':
        return Colors.green;
      case 'pending':
        return Colors.orange;
      case 'rejected':
        return Colors.red;
      default:
        return Colors.grey;
    }
  }

  String _getApprovalStatusText(String status) {
    switch (status) {
      case 'approved':
        return 'Approved';
      case 'pending':
        return 'Pending';
      case 'rejected':
        return 'Rejected';
      default:
        return status;
    }
  }

  void _approveUser(BuildContext context) async {
    try {
      await adminProvider.approveUser(user.id);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${user.fullName} has been approved'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error approving user: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _rejectUser(BuildContext context) async {
    try {
      await adminProvider.rejectUser(user.id);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${user.fullName} has been rejected'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error rejecting user: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _blockUser(BuildContext context) async {
    try {
      await adminProvider.blockUser(user.id);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${user.fullName} has been blocked'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error blocking user: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _unblockUser(BuildContext context) async {
    try {
      await adminProvider.unblockUser(user.id);
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${user.fullName} has been unblocked'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error unblocking user: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }
}
